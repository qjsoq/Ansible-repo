# Check if k3s is already installed
- name: Check if k3s is already installed
  ansible.builtin.stat:
    path: "{{ k3s_binary_path }}"
  register: k3s_installed

# Generate a shared k3s token only on the first node, if not already set
- name: Generate a shared k3s token (only on first node if not already set)
  ansible.builtin.set_fact:
    k3s_token: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters,digits') }}"
  when:
    - inventory_hostname == groups['private'][0]
    - k3s_token is not defined

# Distribute the token to all other hosts
- name: Set k3s_token on all non-first nodes
  ansible.builtin.set_fact:
    k3s_token: "{{ hostvars[groups['private'][0]].k3s_token }}"
  when:
    - inventory_hostname != groups['private'][0]
    - k3s_token is not defined

# Debug the generated or assigned token (useful for troubleshooting)
- name: Show k3s_token
  ansible.builtin.debug:
    var: k3s_token

# Debug the private IP of the first node
- name: Show first node's private IP
  ansible.builtin.debug:
    msg: "First node private IP: {{ hostvars[groups['private'][0]].ansible_host }}"

# Initialize the K3s cluster on the first node (if not already installed)
- name: Initialize cluster on 1st node
  ansible.builtin.shell: |
    curl -sfL {{ k3s_url }} | sh -s - \
      --cluster-init \
      --disable=traefik \
      --disable=servicelb \
      --token {{ k3s_token }} \
      --tls-san {{ vars['k3s-nlb-kubeapi'] }}
  args:
    creates: "{{ k3s_binary_path }}"
  when:
    - inventory_hostname == groups['private'][0]
    - not k3s_installed.stat.exists

# Join the cluster as a server node (on other nodes, if not already installed)
- name: Join k3s cluster as server
  ansible.builtin.shell: |
    curl -sfL {{ k3s_url }} | sh -s - \
      --server https://{{ hostvars[groups['private'][0]].ansible_host }}:6443 \
      --token {{ k3s_token }} \
      --disable=traefik 
  args:
    creates: "{{ k3s_binary_path }}"
  when:
    - inventory_hostname != groups['private'][0]
    - not k3s_installed.stat.exists